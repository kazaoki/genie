#!/usr/bin/env node


'use strict';

var opt = require('optimist');
var stringWidth = require('string-width');
var clc = require('cli-color');

// .usage('Usage: $0 -x [num] -y [num]')
// .demand(['v'])
// .default({x:100, y:50, v:true})
// .boolean('v')
// .alias('v', 'verbose')
// .describe('v', 'show details')
// .options('f', {
// 	alias : 'file',
// 	default : '/etc/passwd',
// })
// .wrap(70)
var argv = opt.usage('Usage: genie|g [Commands] [Options]').options('mode', {
	alias: 'm',
	default: '',
	describe: '実行モードを指定可能'
}).options('config', {
	alias: 'c',
	default: 'config.js',
	describe: '設定ファイルを指定可能'
}).options('help', {
	alias: 'h',
	describe: '説明表示'
}).argv;

/**
 * demo
 * -------------------------------------------------------------------
 */
if (argv._.includes('demo')) {
	// メッセージBOX
	console.log();
	Message('サンプル：default', 'default');
	Message('サンプル：primary', 'primary');
	Message('サンプル：success', 'success');
	Message('サンプル：danger', 'danger');
	Message('サンプル：warning', 'warning');
	Message('サンプル：info', 'info');
	Message('改行込み、1ライン入れも可能。\ntest1\ntest2\ntest3', 'default', 1);
}
/**
 * clean
 * -------------------------------------------------------------------
 */
else if (argv._.includes('clean')) {
		// オプション設定
		var argv = opt.usage('Usage: genie|g clean [Options]').options('locked', {
			alias: 'l',
			describe: '`locked`を含むDataVolumeも削除'
		}).argv;
		;
		if (argv.help) opt.showHelp();
	}
	/**
  * help
  * -------------------------------------------------------------------
  */
	else {
			console.error(opt.help() + '\n' + 'Commands:\n' + '  init    \n' + '  config  \n' + '  ls      \n' + '  up      \n' + '  down    \n' + '  update  \n' + '  cli     \n' + '  reject  \n' + '  clean   \n' + '  build   \n' + '  php     \n' + '  perl    \n' + '  ruby    \n' + '  mysql   \n' + '  psql    \n' + '  open    \n' + '  ngrok   \n' + '  logs    \n' + '  dlsync  \n' + '  httpd   \n' + '  spec    \n' + '  zap     \n' + '  demo     デモするよ！\n');
		}

'use strict';

/**
 * Message
 */

function Message(message) {
	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
	var line = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	// console.log(message)
	// console.log(type)
	// console.log(line)

	// var cls = clc.xterm(10).bgXterm(14);

	// console.log(clc.white.bgBlue.bold('                            '));

	// console.log(cls('ABC'));
	// process.stdout.write(clc.reset);
	// process.stdout.write(clc.erase.screen);
	// process.stdout.write(clc.erase.screenRight);
	// process.stdout.write(clc.move(-2, -2)); // Move cursors two columns and two rows back

	// process.stdout.write(clc.move.lines(2));
	// console.log(cls('123'));

	var indent = '  ';
	var line_color = clc.white;
	var fg_color = clc.white;
	if (type === 'primary') {
		line_color = clc.xterm(26);
		fg_color = clc.xterm(39);
	} else if (type === 'success') {
		line_color = clc.green;
		fg_color = clc.greenBright;
	} else if (type === 'danger') {
		line_color = clc.red;
		fg_color = clc.redBright;
	} else if (type === 'warning') {
		line_color = clc.yellow;
		fg_color = clc.yellowBright;
	} else if (type === 'info') {
		line_color = clc.whiteBright;
		fg_color = clc.whiteBright;
	}

	var messages = message.split(/[\r\n]+/);
	var length = 0;
	for (var i in messages) {
		var len = stringWidth(messages[i]);
		if (length < len) length = len;
	}
	length += 2;

	console.log(indent + line_color('┏') + line_color(Repeat('─', length)) + line_color('┓'));
	for (var i in messages) {
		if (line > 0 && line == i) {
			console.log(indent + line_color('┣') + line_color(Repeat('─', length)) + line_color('┫')
			// line_color('├') +
			// line_color(Repeat('─', length)) +
			// line_color('┤')
			);
		}
		console.log(indent + line_color('│') + fg_color(' ' + messages[i] + ' ') + Repeat(' ', length - 2 - stringWidth(messages[i])) + line_color('│'));
	}
	console.log(indent + line_color('┗') + line_color(Repeat('─', length)) + line_color('┛'));
}
function Repeat(string) {
	var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

	var lump = '';
	if (times > 0) {
		for (var i = 0; i < times; i++) {
			lump += string;
		}
	}
	return lump;
}